#!/bin/bash

mydir="$(basename $PWD)"

### HELP ###

Help() {
	echo "Creates a project build environment for c/c++ projects."
	echo
	echo "Syntax: rargo <option>"
	echo "options:"
	echo "i | init 		Initialize a project in current directory."
	echo "b | build 		Used in project root directory. Builds project. Binary will be in build directory."
	echo "r | run 		Runs current build of project"
	echo "t | test		Runs GTest tests"
	echo "v | valgrind	Runs current build through valgrind"
	echo "h | help 		Prints this help prompt"
}

### INIT ###
Init() {
	git init
	mkdir src include build tests
	touch CMakeLists.txt
	touch ./src/main.c
	touch ./tests/test.cpp
	printf "cmake_minimum_required(VERSION 3.18)\nget_filename_component(ProjectId \${CMAKE_CURRENT_SOURCE_DIR} NAME)\nstring(REPLACE \" \" \"_\" ProjectId \${ProjectId})\nproject(\${ProjectId})\nfind_package(GTest REQUIRED)\nfind_package(Threads REQUIRED)\ninclude_directories(include \${GTEST_INCLUDE_DIRS})\nfile(GLOB SOURCES \"\")\nadd_executable(\${ProjectId} \"src/main.c\" \${SOURCES})\nadd_executable(runTests \"tests/test.cpp\" \${SOURCES})\ntarget_link_libraries(runTests \${GTEST_LIBRARIES} pthread)" > CMakeLists.txt
	printf "#include <stdio.h>\n\nint main(int argc, char** argv)\n{\n\treturn 0;\n}\n" > ./src/main.c
	printf "#include <gtest/gtest.h>\n\nextern \"C\"\n{\n\t// includes\n}\n\nint main(int argc, char **argv)\n{\n\t::testing::InitGoogleTest(&argc, argv);\n\treturn RUN_ALL_TESTS();\n}" > ./tests/test.cpp
}
### BUILD ###
Build() {
	cd build
	cmake ..
	make
	cd ..
}
### RUN ###
Run() {
	cd build
	./$mydir "${@:2}"
	cd ..
}
### TEST ###
Test() {
	cd build
	./runTests
	cd ..
}

Val() {
	cd build
	valgrind ./$mydir "${@:2}"
	cd ..
}

### MAIN PROGRAM ###

# Get options
while true; do
	case "$1" in
		i | init )
			Init
			exit;;
		b | build )
			Build
			exit;;
		r | run )
			Run "$@"
			exit;;
		t | test )
			Test
			exit;;
		h | help )
			Help
			exit;;
		v | valgrind )
			Val "$@"
			exit;;
		* )
			Help
			exit;;
	esac
done
